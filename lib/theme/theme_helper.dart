import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.black900,
            width: 2.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray100,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray40001,
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray40001,
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 36.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 30.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 24.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 12.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 20.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray10001,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 14.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFFFFFFF),
    primaryContainer: Color(0XFF3B5F4F),
    secondaryContainer: Color(0XFF161629),

    // Error colors
    errorContainer: Color(0XFFF9A606),
    onErrorContainer: Color(0XFF092635),

    // On colors(text colors)
    onPrimary: Color(0XFF2E3032),
    onPrimaryContainer: Color(0XFF090909),
    onSecondaryContainer: Color(0XFF939393),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber300 => Color(0XFFFBCC5F);
  Color get amber500 => Color(0XFFFBBC05);

  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray200 => Color(0XFFB1B5BA);
  Color get blueGray400 => Color(0XFF8C8F93);
  Color get blueGray800 => Color(0XFF3C3C5B);
  //Color get blueGray100 => Color(0XFFD7D7D7);
  Color get blueGray10001 => Color(0XFFCECECE);
  Color get blueGray900 => Color(0XFF2C2C2C);
  Color get blueGray90001 => Color(0XFF092635);
  Color get blueGray90002 => Color(0XFF363636);

  // DeepOrange
  Color get deepOrange600 => Color(0XFFF05627);
  Color get green400 => Color(0XFF5BBB60);
  Color get green600 => Color(0XFF44A849);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
  // Gray
  Color get gray100 => Color(0XFFF2F4F6);
  Color get gray10001 => Color(0XFFF2F2F2);
  Color get gray200 => Color(0XFFF4EEEE);
  Color get gray400 => Color(0XFFC1C7CD);
  Color get gray40001 => Color(0XFFBFBFBF);
  Color get gray40002 => Color(0XFFAEAEAE);
  Color get gray50 => Color(0XFFF9F9F9);
  Color get gray800 => Color(0XFF393947);
  Color get gray80001 => Color(0XFF3A3A47);
  //Color get gray100 => Color(0XFFF5F5F5);
  //Color get gray10001 => Color(0XFFF4F4F4);
  //Color get gray200 => Color(0XFFF0F0F0);
  //Color get gray400 => Color(0XFFB4B4B4);
  Color get gray500 => Color(0XFFA4A4A4);
  Color get gray900 => Color(0XFF212121);

  // Green
  Color get green300 => Color(0XFF7FDF9A);
  //Color get green600 => Color(0XFF34A853);

  // Indigo
  Color get indigo900 => Color(0XFF292965);
  Color get indigoA200 => Color(0XFF4A67FF);

  // Lime
  Color get limeA200 => Color(0XFFE5F64A);

  // Pink
  Color get pink600 => Color(0XFFE0144C);

  // Red
  Color get red300 => Color(0XFFFF7070);
  Color get red500 => Color(0XFFEB4335);
  Color get redA200 => Color(0XFFFF4A4A);

  // Teal
  Color get teal300 => Color(0XFF50CD89);
  Color get teal30001 => Color(0XFF5ECBA2);

  // Yellow
  Color get yellow900 => Color(0XFFE0911C);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
